@page "/shirts/{id}"
@inject ApplicationDbContext dbContext
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManagerLinker
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Blazored.LocalStorage
@using FootballShirtStore.Data
@using FootballShirtStore.Entities
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer



    @if (item != null && item.Category != null)

{
    <PageTitle>@item.Name</PageTitle>
    var img = item.FileData.FirstOrDefault(f => f.Type == FileDataType.Image);
    var base64String = Convert.ToBase64String(img.Data);
    var newPrice = item.Price * item.PriceMultiplier;


    <div class="d-flex justify-content-center w-100 mt-5">
        <div class="d-flex flex-row justify-content-evenly shirt-details-card align-items-center bg-light rounded-3 p-3 w-50">
            @if (item.FileData.Any())
            {
                <div class="d-flex flex-wrap ms-3 images">
                    @foreach (var fileData in item.FileData)
                    {
                        <img src="@($"data:image/png;base64,{Convert.ToBase64String(fileData.Data)}")" class="img-fluid rounded-5 shirt-details-image" alt="Image" style="max-width: 200px; max-height: 200px; margin: 10px;" />
                    }
                </div>
            }
            <div class="d-flex flex-column info justify-content-start align-items-start h-100 border-2 border-secondary ps-5 border-start ms-5">
                <div class="d-flex flex-row justify-content-between w-100">
                    <p>For @item.Type</p>
                    <p>@item.Category.ParentCategory.CategoryName: @item.Category.CategoryName</p>
                </div>
                <h3 class="mt-2">@item.Name</h3>
                <p class="fs-6">@item.Description</p>
                <p>Color: @item.Color</p>

                @if (newPrice != item.Price)
                {
                    <h4 class="text-danger">Old Price: @item.Price zł</h4>
                    <h4 class="text-success">New Price: @newPrice.ToString($"F0") zł</h4>

                }
                else
                {
                    <h4>Price: @item.Price zł</h4>
                }
                @if (currentUser is not null)
                {
                    <div>
                        <button class="btn btn-success" @onclick="async () => await addToCart(item)">Add to basket</button>
                    </div>
                }
                @if(currentUser is not null && currentUser.IsAdmin)
                {
                <div class="form-group">
                    <label for="PriceMultiplier">Price Multiplier:</label>
                    <InputNumber id="PriceMultiplier" @bind-Value="newMultiplier" min="0" max="10" step="0.1" class="form-control" />
                </div>
 
                <button class="btn btn-primary mt-3" @onclick="UpdatePriceMultiplier">Update Price Multiplier</button>
                <button class="btn btn-danger mt-5" @onclick="DeleteItem">Delete an item</button>
                }
            </div>

        </div>
    </div>


}
else
{
    <p>Item not found.</p>
}

@code {

    [Parameter]
    public string id { get; set; }

    private Item item;
    private double newMultiplier;

    private ApplicationUser currentUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var User = authState.User;
        // Get the current authenticated user
        var user = await UserManager.GetUserAsync(User);

        if (user != null)
        {
            currentUser = user;

        }
        int itemId;
        if (int.TryParse(id, out itemId))
        {
            item = dbContext.Items.Include(i => i.FileData).Include(i => i.Category).Include(i => i.Category.ParentCategory).FirstOrDefault(i => i.Id == itemId);
            newMultiplier = item?.PriceMultiplier ?? 1;

        }

    }

    private void DeleteItem()
    {

        dbContext.Items.Remove(item);
        dbContext.SaveChanges();

        navigationManagerLinker.NavigateTo("/");
    }

    private async Task UpdatePriceMultiplier()
    {
        if (item != null)
        {
            item.PriceMultiplier = newMultiplier;
            dbContext.SaveChanges();
            // Optionally, you can navigate back to the item details page or another page.
        }
    }
   

    // add to basket
    // probuje pobrac z pamieci przegladarki koszyk, jak koszyk jest null to wtedy tworzy nowa liste, nadpisuje koszyk z dodatkowym przedmiotem
    private async Task addToCart(Item itemToAdd)
    {
        // naprawic
        List<int> items = new List<int>();
        items = await localStorage.GetItemAsync<List<int>>("cart");

        if (items is null)
        {
            items = new List<int>();
        }

        items.Add(itemToAdd.Id);
        await localStorage.SetItemAsync<List<int>>("cart", items);

    }

}
