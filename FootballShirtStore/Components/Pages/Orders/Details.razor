@page "/orders/{id}"
@inject ApplicationDbContext dbContext
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> UserManager
@using FootballShirtStore.Data
@using FootballShirtStore.Entities
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Order details</PageTitle>
@if (order is not null)
{
    <h3>Details of the order @order.Id</h3>
    <div class="d-flex flex-column align-items-center">
        <div class="d-flex justify-content-center">
            <div class="d-flex flex-column justify-content-center">
                <h1>Items:</h1>
                @foreach (var item in order.Items)
                {

                    <div class="me-3">
                        <div class="card mb-3 ms-0" style="width:20rem;">
                            <a href="/shirts/@item.Id">
                                <div class="card-body d-flex justify-content-between">

                                    <div>
                                        <h5 class="card-title">@item.Name</h5>

                                    </div>

                                </div>
                            </a>
                        </div>
                        
                    </div>
                }
                <h1>Final price: @order.TotalPrice zł</h1>
            </div>
            <div class="d-flex flex-column align-items-start ms-5 h-100">
                @if (order.User is not null)
                {
                    <p class="card-text">User's email: @order.User.UserName</p>
                    <p class="card-text">User's address: @order.User.Address</p>
                }
                <div>
                    <h2>Delivery method: @order.DeliveryMethod</h2>
                    <h2>Delivery method: @order.PaymentMethod</h2>
                </div>
            </div>
            
        </div>
        <div class="d-flex justify-content-center mt-5">
            <h3>Status: @order.State</h3>
        </div>
        <div class="d-flex justify-content-center">
            @if(order.State.ToString() != "Accepted"){
            <button class="btn btn-info me-2" @onclick='()=>ChangeState("Accepted")'>Change to Accepted</button>
            }
            @if (order.State.ToString() != "Ongoing")
            {
                <button class="btn btn-warning me-2" @onclick='()=>ChangeState("Ongoing")'>Change to Ongoing</button>
            }
            @if (order.State.ToString() != "Completed")
            {
                <button class="btn btn-success me-2" @onclick='()=>ChangeState("Completed")'>Change to Completed</button>
            }
            @if (order.State.ToString() != "Cancelled")
            {
                <button class="btn btn-danger" @onclick='()=>ChangeState("Cancelled")'>Change to Cancelled</button>
            }
        </div>
    </div>
}
@code {

    [Parameter]
    public string id { get; set; }

    private Order order;

    private void ChangeState(string state)
    {
        if (Enum.TryParse<State>(state, out var parsedState))
        {
            order.State = parsedState;
        }
        dbContext.SaveChanges();


    }

    protected override async Task OnInitializedAsync()
    {

        int orderId;
        if (int.TryParse(id, out orderId))
        {
            order = dbContext.Orders.Include(o => o.User).Include(a => a.Items).FirstOrDefault(i => i.Id == orderId);

        }

    }

}
